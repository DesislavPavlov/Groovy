@model Groovy.ViewModels.SongsViewModel;
@{
    ViewData["Title"] = "Музика";
    bool isGuest = Context.Session.GetString("Username") == "Гост";
}

<style>
    .song-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
    gap: 15px;
    }

    .song-item {
    display: flex;
    justify-content: center;
    align-items: center;
    position: relative;
    overflow: hidden;
    border-radius: 0.5em;
    cursor: pointer;
    transition: transform 0.3s ease-in-out;
    background-color: var(--color);
    max-width: 150px;
    max-height: 150px;
    animation-name: fadeIn;
    animation-duration: 0.2s;
    }

    .song-item:hover {
    transform: scale(1.05);
    }

    .song-item img {
    width: 92.5%;
    height: 92.5%;
    border-radius: 0.5em;
    display: block;
    transition: filter 0.3s ease-in-out;
    }

    .song-item:hover .gradient-overlay, .song-item:hover .song-title {
    opacity: 0.3;
    }

    .song-item:hover img {
    filter: brightness(0.4);
    }

    .song-title {
    position: absolute;
    bottom: 4%;
    width: 92.5%;
    padding: 0.3em 1.5em;
    background-color: rgba(0, 0, 0, 0.25);
    border-bottom-right-radius: 0.5em;
    border-bottom-left-radius: 0.5em;
    pointer-events: none;
    transition: opacity 0.3s;
    }

    .song-title::before {
    content: '';
    position: absolute;
    left: -0.1em;
    bottom: -0.01em;
    width: 1em;
    height: 100%;
    background-color: var(--color);
    border: 1px solid var(--color);
    border-bottom-left-radius: 0.5em;
    }

    .song-item:hover .buttons {
    opacity: 1;
    }

    .add-song-btn:hover, .add-song-btn:focus {
    background-color: #6c757d !important;
    transform: scale(1.1);
    filter: brightness(1) !important;
    }

    .song-item:has(.add-song-btn):hover img, .song-item:has(.add-song-btn):focus img {
    filter: brightness(1);
    }

    .favourite-btn {
        position: absolute;
        top: 2%;
        border: none;
        padding: 10px 15px;
        border-radius: 5px;
        cursor: pointer;
        font-size: 1rem;
        transition: color 0.2s;
    }

    .view-btn {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    border: none;
    padding: 10px 15px;
    border-radius: 5px;
    cursor: pointer;
    font-size: 2rem;
    transition: color 0.2s;
    }

    .play-btn {
    position: absolute;
    bottom: 0.1em;
    font-size: 1.5rem;
    background: none;
    border: none;
    padding: 8px 12px;
    cursor: pointer;
    transition: color 0.2s;
    }

    .edit-btn {
    position: absolute;
    top: 2%;
    left: 2%;
    border: none;
    background: none !important;
    padding: 10px 15px;
    cursor: pointer;
    transition: color 0.2s;
    }

    .delete-btn {
    position: absolute;
    top: 2%;
    right: 2%;
    border: none;
    background: none !important;
    padding: 10px 15px;
    cursor: pointer;
    transition: color 0.2s;
    }

    .buttons {
    position: absolute;
    top: 0;
    width: 100%;
    height: 100%;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: space-between;
    opacity: 0;
    transition: opacity 0.3s;
    z-index: 2;
    }
</style>

<h3>Музика:</h3>

<form method="get" asp-action="Songs">
    <div class="form-group">
        <label class="form-label text-muted" for="searchTerm">Потърсете:</label>

        <div class="input-group">
            <input id="searchTerm" name="searchTerm" type="text" class="form-control" placeholder="Име на песен, автор, жанр..." aria-label="Search bar with a search button" aria-describedby="button-addon4" value="@Model.SearchTerm">
            <div class="input-group-append" id="button-addon4">
                <button class="btn btn-orange" type="submit"><i class="fa-solid fa-magnifying-glass"></i></button>
            </div>
        </div>
    </div>
</form>

<div class="song-grid mt-5">
    @if (Model.Songs != null && Model.Songs.Count > 0)
    {
        int delayIncrementor = 0;
        @foreach (var song in Model.Songs)
        {
            double delay = 0.05 * delayIncrementor++;
            string delayString = delay.ToString(System.Globalization.CultureInfo.InvariantCulture) + "s";
            bool isFavourite = Model.FavouriteSongIds.Contains(song.Id);

            <div class="song-item" style="--gradient-color: linear-gradient(-45deg, @song.Color 30%, transparent); --color: @song.Color; animation-delay: @delayString;">
                <img src="@song.CoverUrl" alt="@song.Title Cover" />
                <div class="gradient-overlay"></div>
                <div class="buttons">
                    @if (!isGuest)
                    {
                        <button class="btn favourite-btn text-light" data-song-id="@song.Id" data-user-id="@Model.UserId" onclick="toggleFavourite(this)">
                            <i class='@(isFavourite ? "fa-solid fa-heart-circle-minus" : "fa-regular fa-heart")'></i>
                        </button>
                    }

                    <a class="view-btn text-light" asp-controller="Details" asp-action="SongDetails" asp-route-id="@song.Id"><i class="fa-solid fa-up-right-and-down-left-from-center"></i></a>
                    <button class="play-btn text-light" onclick="setAudioSource('@song.SongUrl', '@song.CoverUrl', '@song.Title', '@song.Color')"><i class="fa-regular fa-circle-play"></i></button>
                </div>
                <div class="song-title">
                    <h4 class="text-light fs-6 m-0">@song.Title</h4>
                </div>
            </div>
        }
    }
</div>

