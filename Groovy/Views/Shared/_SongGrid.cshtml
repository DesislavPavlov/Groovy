@using Groovy.ViewModels;
@using Newtonsoft.Json;
@model List<Song>;
@{
    int userId = int.Parse(Context.Session.GetString("UserId"));
    string username = Context.Session.GetString("Username");
    bool isGuest = username == "Гост";
    bool isAdmin = username == "admin";

    IndexViewModel indexViewModel = JsonConvert.DeserializeObject<IndexViewModel>(Context.Session.GetString("IndexViewModel"));
}

<style>
    .song-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
        gap: 15px;
        justify-items: center;
    }

    .song-item {
        display: flex;
        justify-content: center;
        align-items: center;
        position: relative;
        overflow: hidden;
        border-radius: 0.5em;
        cursor: pointer;
        transition: transform 0.3s ease-in-out;
        background-color: var(--color);
        max-width: 150px;
        max-height: 150px;
        opacity: 0;
        animation-name: fadeIn;
        animation-duration: 0.2s;
        animation-fill-mode: forwards;
    }

        .song-item:hover {
            transform: scale(1.05);
        }

        .song-item img {
            width: 92.5%;
            height: 92.5%;
            border-radius: 0.5em;
            display: block;
            transition: filter 0.3s ease-in-out;
        }

        .song-item:hover .gradient-overlay, .song-item:hover .song-title {
            opacity: 0.3;
        }

        .song-item:hover img {
            filter: brightness(0.4);
        }

    .song-title {
        position: absolute;
        bottom: 4%;
        width: 92.5%;
        padding: 0.3em 1.5em;
        background-color: rgba(0, 0, 0, 0.25);
        border-bottom-right-radius: 0.5em;
        border-bottom-left-radius: 0.5em;
        pointer-events: none;
        transition: opacity 0.3s;
    }

        .song-title::before {
            content: '';
            position: absolute;
            left: -0.1em;
            bottom: -0.01em;
            width: 1em;
            height: 100%;
            background-color: var(--color);
            border: 1px solid var(--color);
            border-bottom-left-radius: 0.5em;
        }

    .song-item:hover .buttons {
        opacity: 1;
    }

    .add-song-btn:hover, .add-song-btn:focus {
        background-color: #6c757d !important;
        transform: scale(1.2);
        filter: brightness(0.9) !important;
    }

    .song-item:has(.add-song-btn):hover img, .song-item:has(.add-song-btn):focus img {
        filter: brightness(1);
    }

    .favourite-btn {
        position: absolute;
        top: 2%;
        border: none;
        padding: 10px 15px;
        border-radius: 5px;
        cursor: pointer;
        font-size: 1rem;
        transition: color 0.2s;
    }

    .view-btn {
        position: absolute;
        top: 50%;
        transform: translateY(-50%);
        border: none;
        padding: 10px 15px;
        border-radius: 5px;
        cursor: pointer;
        font-size: 2rem;
        transition: color 0.2s;
    }

    .play-btn {
        position: absolute;
        bottom: 0.1em;
        font-size: 1.5rem;
        background: none;
        border: none;
        padding: 8px 12px;
        cursor: pointer;
        transition: color 0.2s;
    }

    .edit-btn {
        position: absolute;
        top: 2%;
        left: 2%;
        border: none;
        background: none !important;
        padding: 10px 15px;
        cursor: pointer;
        transition: color 0.2s;
    }

    .delete-btn {
        position: absolute;
        top: 2%;
        right: 2%;
        border: none;
        background: none !important;
        padding: 10px 15px;
        cursor: pointer;
        transition: color 0.2s;
    }

    .buttons {
        position: absolute;
        top: 0;
        width: 100%;
        height: 100%;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: space-between;
        opacity: 0;
        transition: opacity 0.3s;
        z-index: 2;
    }
</style>

<div class="song-grid mt-5">
    @if (isAdmin)
    {
        <div class="song-item">
            <button type="button" class="btn btn-secondary add-song-btn transition d-flex justify-content-center" data-bs-toggle="modal" data-bs-target="#createSongModal">
                <img src="~/media/add_button.jpg" alt="admin add song button" class="p-3" width="150" height="150" />
            </button>
        </div>
    }

    @if (Model != null && Model.Count > 0)
    {
        int delayIncrementor = 0;
        @foreach (var song in Model)
        {
            double delay = 0.05 * delayIncrementor++;
            string delayString = delay.ToString(System.Globalization.CultureInfo.InvariantCulture) + "s";
            bool isFavourite = indexViewModel.FavouriteSongIds.Contains(song.Id);

            <div class="song-item" style="--gradient-color: linear-gradient(-45deg, @song.Color 30%, transparent); --color: @song.Color; animation-delay: @delayString;">
                <img src="@song.CoverUrl" alt="@song.Title Cover" />
                <div class="gradient-overlay"></div>
                <div class="buttons">
                    @if (!isGuest)
                    {
                        <button class="btn favourite-btn text-light" data-song-id="@song.Id" data-user-id="@userId" onclick="toggleFavourite(this)">
                            <i class='@(isFavourite ? "fa-solid fa-heart-circle-minus" : "fa-regular fa-heart")'></i>
                        </button>
                    }

                    <a class="view-btn text-light" asp-controller="Details" asp-action="SongDetails" asp-route-id="@song.Id"><i class="fa-solid fa-up-right-and-down-left-from-center"></i></a>

                    <button class="play-btn text-light" onclick="setAudioSource('@song.SongUrl', '@song.CoverUrl', '@song.Title', '@song.Color'); trackSongClick('@song.Id', '@userId')"><i class="fa-regular fa-circle-play"></i></button>

                    @if (isAdmin)
                    {
                        <button type="button" class="btn edit-btn text-light" data-bs-toggle="modal" data-bs-target="#editSongModal" data-song='@Html.Raw(Json.Serialize(song))' data-artists='@Html.Raw(Json.Serialize(indexViewModel.SongArtistRelations))' data-genres='@Html.Raw(Json.Serialize(indexViewModel.SongGenreRelations))'><i class="fa-solid fa-pencil"></i></button>
                        <button type="button" class="btn delete-btn text-light" data-bs-toggle="modal" data-bs-target="#deleteSongModal" data-song-title="@song.Title" data-song-id="@song.Id"><i class="fa-solid fa-trash"></i></button>
                    }
                </div>
                <div class="song-title">
                    <h4 class="text-light fs-6 m-0">@song.Title</h4>
                </div>
            </div>
        }
    }
</div>


<!-- Create Modal -->
<div class="modal fade" id="createSongModal" tabindex="-1" role="dialog" aria-labelledby="createSongModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="createSongModalLabel">Добави песен</h5>
                <button type="button" class="btn btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>

            <div class="modal-body">
                <form id="uploadSongForm" asp-action="UploadSong" asp-controller="Upload" method="post" enctype="multipart/form-data">
                    <!-- Title -->
                    <div class="w-50 form-group mb-2">
                        <label class="form-label text-muted" for="title">Заглавие</label>
                        <input class="form-control" type="text" value="" id="title" name="title" />
                    </div>

                    <!-- Color -->
                    <div class="form-group mb-2">
                        <label class="form-label text-muted" for="color">Цвят</label>
                        <input class="form-control" type="color" value="" id="color" name="color" />
                    </div>

                    <!-- Artists -->
                    <div class="form-group mb-2 artist-container">
                        <label class="form-label text-muted">Изпълнители</label>
                        @foreach (var artist in indexViewModel.Artists)
                        {
                            <div class="form-group d-flex align-items-center gap-2">
                                <input class="form-check m-0 rounded-3" type="checkbox" id="@artist.Name" name="artist" value="@artist.Id" />
                                <label class="form-label text-muted m-0" for="@artist.Name">@artist.Name</label>
                            </div>
                        }
                    </div>

                    <!-- Genres -->
                    <div class="form-group mb-2 genre-container">
                        <label class="form-label text-muted">Жанрове</label>
                        @foreach (var genre in indexViewModel.Genres)
                        {
                            <div class="form-group d-flex align-items-center gap-2">
                                <input class="form-check m-0 rounded-3" type="checkbox" id="@genre.Name" name="genre" value="@genre.Id" />
                                <label class="form-label text-muted m-0" for="@genre.Name">@genre.Name</label>
                            </div>
                        }
                    </div>

                    <!-- Cover -->
                    <div class="form-group mb-2">
                        <label class="form-label text-muted" for="coverImageFile">Снимка</label>
                        <input class="form-control" type="file" name="coverImageFile" id="coverImageFile" accept="image/webp" />
                    </div>

                    <div>
                        <img class="mw-100" id="songImageToCrop" src="" alt="" />
                    </div>

                    <!-- Audio -->
                    <div class="form-group mb-2">
                        <label class="form-label text-muted" for="audioFile">Аудио файл</label>
                        <input class="form-control" type="file" name="audioFile" id="audioFile" accept="audio/webm" />
                    </div>

                    <div class="form-group mb-2">
                        <audio class="w-100" id="audioPreview" controls style="display: none;">
                            Your browser does not support the audio element.
                        </audio>
                    </div>
                </form>

                <div class="alert alert-danger m-0 p-2 error-message" style="display: none;"></div>
            </div>

            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Назад</button>
                <button type="button" class="btn btn-orange" id="submitSong">Запази</button>
            </div>
        </div>
    </div>
</div>

<!-- Edit Modal -->
<div class="modal fade" id="editSongModal" tabindex="-1" role="dialog" aria-labelledby="editSongModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editSongModalLabel">Редактирай песен</h5>
                <button type="button" class="btn btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>

            <div class="modal-body">
                <form id="updateSongForm" asp-controller="Update" asp-action="UpdateSong" method="post" enctype="multipart/form-data">
                    <!-- Title -->
                    <div class="w-50 form-group mb-2">
                        <label class="form-label text-muted" for="title">Заглавие</label>
                        <input class="form-control" type="text" value="" id="title" name="title" />
                    </div>

                    <!-- Color -->
                    <div class="form-group mb-2">
                        <label class="form-label text-muted" for="color">Цвят</label>
                        <input class="form-control" type="color" value="" id="color" name="color" />
                    </div>

                    <!-- Artists -->
                    <div class="form-group mb-2 artist-container">
                        <label class="form-label text-muted">Изпълнители</label>
                        @foreach (var artist in indexViewModel.Artists)
                        {
                            <div class="form-group d-flex align-items-center gap-2">
                                <input class="form-check m-0 rounded-3" type="checkbox" id="@artist.Name" name="artist" value="@artist.Id" />
                                <label class="form-label text-muted m-0" for="@artist.Name">@artist.Name</label>
                            </div>
                        }
                    </div>

                    <!-- Genres -->
                    <div class="form-group mb-2 genre-container">
                        <label class="form-label text-muted">Жанрове</label>
                        @foreach (var genre in indexViewModel.Genres)
                        {
                            <div class="form-group d-flex align-items-center gap-2">
                                <input class="form-check m-0 rounded-3" type="checkbox" id="@genre.Name" name="genre" value="@genre.Id" />
                                <label class="form-label text-muted m-0" for="@genre.Name">@genre.Name</label>
                            </div>
                        }
                    </div>

                    <!-- Cover -->
                    <div class="form-group mb-2">
                        <label class="form-label text-muted" for="editCoverImageFile">Снимка</label>
                        <input class="form-control" type="file" name="editCoverImageFile" id="editCoverImageFile" accept="image/webp" />
                    </div>

                    <div>
                        <img class="mw-100" id="editSongImageToCrop" src="" alt="" />
                    </div>

                    <!-- Audio -->
                    <div class="form-group mb-2">
                        <label class="form-label text-muted" for="editAudioFile">Аудио файл</label>
                        <input class="form-control" type="file" name="editAudioFile" id="editAudioFile" accept="audio/webm" />
                    </div>

                    <div class="form-group mb-2">
                        <audio class="w-100" id="editAudioPreview" controls style="display: none;">
                            Your browser does not support the audio element.
                        </audio>
                    </div>
                </form>

                <div class="alert alert-danger m-0 p-2 error-message" style="display: none;"></div>
            </div>

            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Назад</button>
                <button type="button" class="btn btn-orange" id="submitEditSong">Запази</button>
            </div>
        </div>
    </div>
</div>

<!-- Delete Modal -->
<div class="modal fade" id="deleteSongModal" tabindex="-1" role="dialog" aria-labelledby="deleteSongModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteSongModalLabel">Премахни песен <span class="text-orange song-title-placeholder"></span></h5>
                <button type="button" class="btn btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>

            <div class="modal-body">
                <h6 class="text-dark fw-bolder">Сигурен/а ли сте, че искате да изтриете песен <span class="text-orange song-title-placeholder"></span>?</h6>
            </div>

            <!-- Hidden form for sending the request correctly -->
            <form id="deleteSongForm" class="d-none" asp-controller="Delete" asp-action="DeleteSong"></form>

            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Назад</button>
                <button type="button" class="btn btn-danger" id="submitDeleteSong">Изтрий</button>
            </div>
        </div>
    </div>
</div>


<script>
    // Display preview for image crop
    document.getElementById("coverImageFile").addEventListener("change", (e) => {
        const file = e.target.files[0];
        const songImageToCrop = document.getElementById("songImageToCrop");

        if (file) {
            const reader = new FileReader();

            reader.onload = (e) => {
                songImageToCrop.src = e.target.result;

                songImageToCrop.onload = () => {
                    if (cropper) {
                        cropper.destroy();
                    };

                    cropper = new Cropper(songImageToCrop, {
                        aspectRatio: 1,
                        viewMode: 1
                    });
                };
            };

            reader.readAsDataURL(file);
        }
    });
    document.getElementById("editCoverImageFile").addEventListener("change", (e) => {
        const file = e.target.files[0];
        const songImageToCrop = document.getElementById("editSongImageToCrop");

        if (file) {
            const reader = new FileReader();

            reader.onload = (e) => {
                songImageToCrop.src = e.target.result;

                songImageToCrop.onload = () => {
                    if (cropper) {
                        cropper.destroy();
                    };

                    cropper = new Cropper(songImageToCrop, {
                        aspectRatio: 1,
                        viewMode: 1
                    });
                };
            };

            reader.readAsDataURL(file);
        }
    });

    // Display preview for audio file
    document.getElementById("audioFile").addEventListener("change", (event) => {
        var file = event.target.files[0];
        if (file) {
            var audioPreview = document.getElementById("audioPreview");
            var objectURL = URL.createObjectURL(file);
            audioPreview.src = objectURL;
            audioPreview.style.display = "block";
            audioPreview.volume = 0.5;
        }
    });
    document.getElementById("editAudioFile").addEventListener("change", (event) => {
        var file = event.target.files[0];
        if (file) {
            var audioPreview = document.getElementById("editAudioPreview");
            var objectURL = URL.createObjectURL(file);
            audioPreview.src = objectURL;
            audioPreview.style.display = "block";
            audioPreview.volume = 0.5;
        }
    });

    // Submit create song
    document.getElementById("submitSong").addEventListener("click", () => {
        hideError();

        const form = document.getElementById("uploadSongForm");

        // Validate
        const nameInput = document.getElementById("title");
        const artistCheckboxes = form.querySelectorAll("input[name='artist']");
        const genreCheckboxes = form.querySelectorAll("input[name='genre']");
        const originalCoverFile = document.getElementById("coverImageFile").files[0];
        const audioFile = document.getElementById("audioFile").files[0];

        if (!nameInput.value.trim()) {
            showError("Моля въведете заглавие на песента!");
            return;
        }
        if (!Array.from(artistCheckboxes).some(checkbox => checkbox.checked)) {
            showError("Моля изберете поне един изпълнител!");
            return;
        }
        if (!Array.from(genreCheckboxes).some(checkbox => checkbox.checked)) {
            showError("Моля изберете поне един жанр!");
            return;
        }
        if (!originalCoverFile) {
            showError("Моля изберете снимка!");
            return;
        }
        if (!audioFile) {
            showError("Моля изберете аудио файл!");
            return;
        }

        if (cropper) {
            showLoadingScreen();

            cropper.getCroppedCanvas().toBlob((blob) => {
                if (!blob) {
                    showError("Възникна грешка при изрязването на снимката!");
                    return;
                }

                // Execute request
                const checkedArtists = [...form.querySelectorAll('input[name="artist"]:checked')].map(input => input.value);
                const checkedGenres = [...form.querySelectorAll('input[name="genre"]:checked')].map(input => input.value);
                const originalCoverFileName = originalCoverFile.name;
                const formData = new FormData(form);
                formData.append("audioFile", audioFile);
                formData.append("croppedImage", blob, originalCoverFileName);
                formData.append("genres", JSON.stringify(checkedGenres));
                formData.append("artists", JSON.stringify(checkedArtists));

                fetch(form.action, {
                    method: 'POST',
                    body: formData,
                })
                .then(res => res.json())
                .then(data => {
                    const createSongModalElem = document.getElementById('createSongModal');
                    const createSongModal = bootstrap.Modal.getInstance(createSongModalElem);
                    createSongModal.hide();

                    location.reload();
                })
                .catch(error => {
                    console.error("Error:", error);
                    hideLoadingScreen();
                });
            });
        }
    });

    // Submit edit song
    var editSongModalElem = document.getElementById("editSongModal");
    editSongModalElem.addEventListener("show.bs.modal", (event) => {
        hideError();

        // Get info
        var button = event.relatedTarget;
        var song = JSON.parse(button.getAttribute("data-song"));
        var artists = JSON.parse(button.getAttribute("data-artists"))[song.id];
        var genres = JSON.parse(button.getAttribute("data-genres"))[song.id];
        const form = editSongModalElem.querySelector("form");

        // Get inputs
        const titleInput = editSongModalElem.querySelector("#title");
        const colorInput = editSongModalElem.querySelector("#color");
        const imagePreview = editSongModalElem.querySelector("#editSongImageToCrop");
        const audioPreview = editSongModalElem.querySelector("#editAudioPreview");
        const artistCheckboxes = editSongModalElem.querySelectorAll("input[name='artist']");
        const genreCheckboxes = editSongModalElem.querySelectorAll("input[name='genre']");

        // Set input values
        titleInput.value = song.title;
        colorInput.value = song.color;
        imagePreview.src = song.coverUrl;
        audioPreview.src = song.songUrl;
        artistCheckboxes.forEach(a => {
            a.checked = artists.indexOf(parseInt(a.value)) != -1;
        });
        genreCheckboxes.forEach(g => {
            g.checked = genres.indexOf(parseInt(g.value)) != -1;
        });

        // Add request sending functionality
        const editButton = document.getElementById("submitEditSong");
        editButton.removeEventListener("click", handleSongEdit, { once: true });
        editButton.addEventListener("click", handleSongEdit, { once: true });

        function handleSongEdit() {
            // Validate
            if (!titleInput.value.trim()) {
            showError("Моля въведете заглавие на песента!");
            return;
            }
            if (!Array.from(artistCheckboxes).some(checkbox => checkbox.checked)) {
                showError("Моля изберете поне един изпълнител!");
                return;
            }
            if (!Array.from(genreCheckboxes).some(checkbox => checkbox.checked)) {
                showError("Моля изберете поне един жанр!");
                return;
            }

            showLoadingScreen();

            const checkedArtists = [...editSongModalElem.querySelectorAll('input[name="artist"]:checked')].map(input => input.value);
            const checkedGenres = [...editSongModalElem.querySelectorAll('input[name="genre"]:checked')].map(input => input.value);
            const originalFile = document.getElementById("editCoverImageFile").files[0];
            const audioFile = document.getElementById("editAudioFile").files[0];

            const formData = new FormData();
            formData.append("songId", song.id);
            formData.append("title", titleInput.value);
            formData.append("coverUrl", song.coverUrl);
            formData.append("songUrl", song.songUrl);
            formData.append("color", colorInput.value);
            formData.append("artists", JSON.stringify(checkedArtists));
            formData.append("genres", JSON.stringify(checkedGenres));
            formData.append("audioFile", audioFile);
            console.log("appending audio file: " + audioFile);

            if (originalFile) {
                if (cropper) {
                    cropper.getCroppedCanvas().toBlob((blob) => {
                        if (!blob) {
                            showError("Възникна грешка при изрязването на снимката!");
                            return;
                        }

                        formData.append("croppedImage", blob, originalFile.name);

                        sendRequest();
                    });
                }
            }
            else {
                formData.append("croppedImage", new Blob(), "");
                sendRequest();
            }

            function sendRequest() {
                fetch(form.action, {
                    method: 'PUT',
                    body: formData
                })
                .then(res => res.json())
                .then(data => {
                    console.log("Server response:", data);

                    const editModal = bootstrap.Modal.getInstance(editSongModalElem);
                    editModal.hide();

                    location.reload();
                })
                .catch(error => {
                    console.error("Error:", error);
                    hideLoadingScreen();
                });
            }
        }
    });

    // Submit delete song
    document.getElementById("deleteSongModal").addEventListener("show.bs.modal", (event) => {
        var button = event.relatedTarget;
        var songId = button.getAttribute("data-song-id");
        var songTitle = button.getAttribute("data-song-title");
        const form = document.getElementById("deleteSongForm");

        document.querySelectorAll(".song-title-placeholder").forEach(elem => elem.textContent = songTitle);

        const formData = new FormData();
        formData.append("songId", songId);

        const deleteButton = document.getElementById("submitDeleteSong");
        deleteButton.removeEventListener("click", handleSongDelete, { once: true });
        deleteButton.addEventListener("click", handleSongDelete, { once: true });

        function handleSongDelete() {
            showLoadingScreen();

            fetch(form.action, {
                method: 'POST',
                body: formData
            })
                .then(res => res.json())
                .then(data => {
                    console.log("Server response:", data);

                    const deleteModalElem = document.getElementById('deleteSongModal');
                    const deleteModal = bootstrap.Modal.getInstance(deleteModalElem);
                    deleteModal.hide();

                    location.reload();
                })
                .catch(error => {
                    console.error("Error:", error);
                    hideLoadingScreen();
                });
        }
    });

    // Error message
    function showError(message) {
        const errorElem = document.querySelectorAll(".error-message");
        errorElem.forEach(elem => {
            elem.style.display = "block";
            elem.innerText = message;
        });
    }
    function hideError() {
        const errorElem = document.querySelectorAll(".error-message");
        errorElem.forEach(elem => {
            elem.style.display = "none";
        });
    }
</script>